 Proposition A. Selection sort uses N 2 /2 compares and N exchanges to sort an
  array of length N.


  Proposition B. Insertion sort uses N 2 /4 compares and N 2 /4 exchanges to sort
  a randomly ordered array of length N with distinct keys, on the average. The worst
  case is N 2 /2 compares and N 2 /2 exchanges and the best case is N  1 compares
  and 0 exchanges.


  Proposition C. The number of exchanges used by insertion sort is equal to the
  number of inversions in the array, and the number of compares is at least equal to
  the number of inversions and at most equal to the number of inversions plus the
  array size minus 1.

  Property D. The running times of insertion sort and selection sort are quadratic
  and within a small constant factor of one another for randomly ordered arrays of
  distinct values.

  these elementary
  algorithms is worthwhile for several reasons:
  ■ They help us work out the ground rules.
  ■ They provide performance benchmarks.
  ■ They often are the method of choice in some specialized situations.
  ■ They can serve as the basis for developing better algorithms.


  Property E. The number of compares used by shellsort with the increments 1, 4,
  13, 40, 121, 364, . . . is bounded by a small multiple of N times the number of incre-
  ments used.